# Based on from https://github.com/canonical/packer-maas 's centos8 kickstart file


##### Install settings ####

# Use CDROM installation media
url --url=http://download.rockylinux.org/pub/rocky/8.6/BaseOS/x86_64/os/
repo --name="AppStream" --baseurl="http://download.rockylinux.org/pub/rocky/8.6/AppStream/x86_64/os/"

# Use text install
text
# Don't run the Setup Agent on first boot
firstboot --disabled
eula --agreed
poweroff
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Root password - This gets removed 
rootpw --plaintext password

# System services
selinux --permissive
firewall --enabled
services --enabled="NetworkManager,sshd,chronyd,cloud-init"
# System timezone
timezone America/Chicago --isUtc
# System booloader configuration
zerombr
clearpart --all --initlabel
part / --size=1 --grow --asprimary --fstype=ext4
network --bootproto=dhcp

skipx

##### Post Install Prep ######

%post --erroronfail

# Get ZFS repo via method outlined in zfsonlinux.org
source /etc/os-release
RHEL_ZFS_REPO=https://zfsonlinux.org/epel/zfs-release.el${VERSION_ID/./_}.noarch.rpm
dnf install -y $RHEL_ZFS_REPO
dnf install -y epel-release elrepo-release
dnf config-manager --disable zfs
dnf config-manager --enable zfs-kmod

# Also get zrepl from same repo
cat > /etc/yum.repos.d/zrepl.repo <<EOF
[zrepl]
name = zrepl
baseurl = https://zrepl.cschwarz.com/rpm/repo
gpgkey = https://zrepl.cschwarz.com/rpm/rpm-key.asc
EOF

dnf install -y zfs zrepl kmod-wireguard wireguard-tools


# workaround anaconda requirements and clear root password
passwd -d root
passwd -l root

# Clean up install config not applicable to deployed environments.
for f in resolv.conf fstab; do
    rm -f /etc/$f
    touch /etc/$f
    chown root:root /etc/$f
    chmod 644 /etc/$f
done

rm -f /etc/sysconfig/network-scripts/ifcfg-[^lo]*

# Kickstart copies install boot options. Serial is turned on for logging with
# Packer which disables console output. Disable it so console output is shown
# during deployments
sed -i 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL_OUTPUT="console"/g' /etc/default/grub
sed -i '/GRUB_SERIAL_COMMAND="serial"/d' /etc/default/grub
sed -ri 's/(GRUB_CMDLINE_LINUX=".*)\s+console=ttyS0(.*")/\1\2/' /etc/default/grub


dnf clean all
%end

%packages
@core
bash-completion
cloud-init
# cloud-init only requires python3-oauthlib with MAAS. As such upstream
# removed this dependency.
python3-oauthlib
rsync
tar
# grub2-efi-x64 ships grub signed for UEFI secure boot. If grub2-efi-x64-modules
# is installed grub will be generated on deployment and unsigned which breaks
# UEFI secure boot.
grub2-efi-x64
efibootmgr
shim-x64
dosfstools
lvm2
mdadm
device-mapper-multipath
iscsi-initiator-utils

%end

