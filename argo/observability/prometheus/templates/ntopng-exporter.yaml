apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ntopng-exporter
  name: ntopng-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ntopng-exporter
  strategy: {}
  template:
    metadata:
      labels:
        app: ntopng-exporter
    spec:
      containers:
        - image: ghcr.io/onemorebyte/ntopng-exporter:v1.1.1
          name: ntopng-exporter
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: config
          ports:
            - containerPort: 3001
              name: http
              protocol: TCP
      volumes:
        - name: config
          configMap:
            name: ntopng-exporter-config
---
apiVersion: v1
kind: Service
metadata:
  name: ntopng-exporter
spec:
  ports:
    - name: http
      port: 3001
      protocol: TCP
      targetPort: 3001
  selector:
    app: ntopng-exporter
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ntopng-exporter-config
  labels:
    app: ntopng-exporter
data:
  ntopng-exporter.yaml: |
    ntopng:
      endpoint: "https://192.168.13.1:3000"
      allowUnsafeTLS: true # set to true to accept self-signed or otherwise unverifiable certs from ntopng (default: false)
      user: prometheus
      password: Pu6j83%Km$hm37Zp
      authMethod: basic # cookie, basic, or none are accepted values
      scrapeInterval: 15s # scrape from the ntopng API every x period of time (should be synced with your prometheus scrapes) (default: 1 minute)
      scrapeTargets: # you can also specify "all" as a single list item to scrape all available endpoints (default: all)
      - all

    host:
      interfacesToMonitor:
      - bridge0
      - lagg0.13
      - lagg0.50
      - lagg0.60
      - pppoe1
      - tun_wg0

    metric:
      localSubnetsOnly: []
      excludeDNSMetrics: false # set to true, if you don't care about DNS metrics (also reduces number of metrics) (default: false)
      serve:
        ip: 0.0.0.0 # IP to serve metrics on, 0.0.0.0 is all interfaces (default: 0.0.0.0)
        port: 3001 # port to serve metrics on (default: 3001)
