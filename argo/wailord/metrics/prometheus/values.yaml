kube-prometheus-stack:
  grafana:
    enabled: false

  prometheus:
    prometheusSpec:
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false

      # Allegedly, an llm said this will select all labels.
      serviceMonitorSelector:
        matchLabels: {}
      podMonitorSelector:
        matchLabels: {}
      probeSelector:
        matchLabels: {}
      ruleSelector:
        matchLabels: {}
      scrapeConfigSelector:
        matchLabels: {}
      thanos:
        objectStorageConfig:
          existingSecret:
            name: thanos-s3-config
            key: objstore.yml
      additionalScrapeConfigs: []

    thanosService:
      enabled: true
      clusterIP: ""
    thanosServiceMonitor:
      enabled: true

  alertmanager:
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ["job"]
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: "discord-notifications"
      receivers:
        - name: "discord-notifications"
          discord_configs:
            - webhook_url_file: "/etc/alertmanager/secrets/webhook-url"
              title: '{{ template "discord.default.title" . }}'
              message: '{{ template "discord.default.message" . }}'
      templates:
        - "/etc/alertmanager/config/*.tmpl"
    templateFiles:
      discord.tmpl: |-
        {{ define "discord.default.title" }}
        [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
        {{ end }}

        {{ define "discord.default.message" }}
        {{ if gt (len .Alerts.Firing) 0 }}
        **Alerts Firing:**
        {{ range .Alerts.Firing }}
        • {{ .Labels.instance }}: {{ .Annotations.description }}
        {{- end }}
        {{ end }}
        {{ if gt (len .Alerts.Resolved) 0 }}
        **Alerts Resolved:**
        {{ range .Alerts.Resolved }}
        • {{ .Labels.instance }}: {{ .Annotations.description }}
        {{- end }}
        {{ end }}
        {{ end }}

    alertmanagerSpec:
      volumeMounts:
        - name: alertmanager-discord-webhook
          mountPath: /etc/alertmanager/secrets
          subPath: webhook-url
          key: webhook-url

      volumes:
        - name: alertmanager-discord-webhook
          secret:
            secretName: alertmanager-discord-webhook

thanos:
  commonLabels:
    tailscale.com/proxy-class: "jscknet"
  existingObjstoreSecret: thanos-s3-config

  query:
    dnsDiscovery:
      sidecarsService: "prometheus-operated"

  compactor:
    enabled: true

  storegateway:
    enabled: true
    resources:
      limits:
        memory: 1Gi

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

  queryFrontend:
    ingress:
      enabled: true
      hostname: thanos-query
      tls: true
      ingressClassName: tailscale
      extraTls:
        - hosts:
            - thanos-query
