minio:
  mode: standalone

  extraContainers:
    - name: ts-sidecar
      imagePullPolicy: Always
      image: "ghcr.io/tailscale/tailscale:latest"
      env:
        - name: "TS_ACCEPT_DNS"
          value: "true"
        - name: "TS_HOSTNAME"
          value: "wailord-minio"
        - name: "TS_EXTRA_ARGS"
          value: "--advertise-tags=tag:minio"
        - name: TS_KUBE_SECRET
          value: "minio-tailscale-state"
        - name: TS_USERSPACE
          value: "false"
        - name: TS_AUTHKEY
          valueFrom:
            secretKeyRef:
              name: minio-tailscale-auth
              key: TS_AUTHKEY
              optional: true
      securityContext:
        privileged: true
        capabilities:
          add:
            - NET_ADMIN

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - bulk-datastore

  persistence:
    enabled: true
    existingClaim: minio-hostpath-pvc

  ingress:
    enabled: true
    annotations: {}
    path: /
    hosts:
      - minio.jsck.network
    tls:
      - secretName: jsck.network-cert
        hosts:
          - minio.jsck.network

  consoleIngress:
    enabled: true
    annotations: {}
    path: /
    hosts:
      - console.minio.jsck.network
    tls:
      - secretName: console.minio.jsck.network-cert
        hosts:
          - console.minio.jsck.network

  securityContext:
    enabled: true
    runAsUser: 11337
    runAsGroup: 11337
    fsGroup: 11337
    # fsGroupChangePolicy: "OnRootMismatch"

  buckets:
    - name: longhorn-backup
      policy: none
      versioning: true
    - name: smoked-mutex
      policy: none
      versioning: true
    - name: thanos
      policy: none
      versioning: true

  policies:
    - name: longhorn-backup-readwrite
      statements:
        - effect: Allow
          resources:
            - "arn:aws:s3:::longhorn-backup/*"
          actions:
            - "s3:*"
    - name: milien-backup-readwrite
      statements:
        - effect: Allow
          resources:
            - "arn:aws:s3:::smoked-mutex/*"
          actions:
            - "s3:*"
    - name: longhorn-backup-readonly
      statements:
        - effect: Allow
          resources:
            - "arn:aws:s3:::longhorn-backup/*"
          actions:
            - "s3:GetObject"
            - "s3:List*"
        - effect: Allow
          resources:
            - "arn:aws:s3:::longhorn-backup"
          actions:
            - "s3:GetBucketLocation"
            - "s3:GetObject"
            - "s3:List*"

    - name: thanos-readwrite
      statements:
        - effect: Allow
          resources:
            - "arn:aws:s3:::thanos/*"
          actions:
            - "s3:*"
  users:
    - accessKey: longhorn
      existingSecret: longhorn-user-secret
      existingSecretKey: password
      policy: longhorn-backup-readwrite
    - accessKey: okta
      existingSecret: milien-user-secret
      existingSecretKey: password
      policy: milien-backup-readwrite
    - accessKey: longhorn-replication-helldiver
      existingSecret: helldiver-user-secret
      existingSecretKey: password
      policy: longhorn-backup-readonly
    - accessKey: thanos
      existingSecret: thanos-user-secret
      existingSecretKey: password
      policy: thanos-readwrite

  svcaccts: []

  environment:
    MINIO_BROWSER_REDIRECT_URL: "https://console.minio.jsck.network"

  oidc:
    enabled: true
    configUrl: "https://auth.jackhil.de/realms/master/.well-known/openid-configuration"
    clientId: "minio"
    existingClientSecretName: "minio-client-secret"
    existingClientSecretKey: "client-secret"
    claimName: "policy"
    scopes: "openid,profile,email"
    redirectUri: "https://console.minio.jsck.network/oauth_callback"
    # Can leave empty
    claimPrefix: ""
    comment: ""
    displayName: "Keycloak"
